{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Pour déployer des conteneurs dans un cluster \", _jsx(_components.a, {\n        href: \"/docker-swarm\",\n        title: \"Docker Swarm\",\n        children: \"Docker Swarm\"\n      }), \", il faut créer des \", _jsx(_components.strong, {\n        children: \"services Docker\"\n      }), \".\"]\n    }), \"\\n\\n\", _jsx(_components.p, {\n      children: \"Les services permettent de définir un état souhaité pour une application que Docker Swarm prendra soin de gérer tout seul.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Si un conteneur d'un service s'arrête, il sera automatiquement relancer.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Il existe deux types de services :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", \"Les \", _jsx(_components.strong, {\n          children: \"services répliqués\"\n        }), \" ; vous spécifiez le nombre de réplicas que vous souhaitez, et ils seront attribués aux nœuds disponibles.\", \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", \"Les \", _jsx(_components.strong, {\n          children: \"services globaux\"\n        }), \" ; un seul réplica sera attribué sur chaque noeud.\", \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Le mode de réplication par défaut d'un service est répliqué. Pour déployer un service global, vous devez passer l'indicateur \", _jsx(_components.code, {\n        children: \"--mode global\"\n      }), \" à la commande \", _jsx(_components.code, {\n        children: \"docker service create\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour créer un service, il suffit d'exécuter la commande suivante :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker service create -p published=2368,target=2368,mode=host ghost\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Vous pouvez accéder à votre application Ghost à l'adresse : \", _jsx(_components.a, {\n        href: \"http://localhost:2368\",\n        children: \"http://localhost:2368\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour mettre à jour un service :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker service update --force --image ghost:5 ghost\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"datePublished":"2021-05-17T17:32","dateUpdated":"2021-05-17T17:32","permalink":"service-docker","publish":true,"rss":true,"aliases":["Docker service"]},"scope":{}},"isIndex":false,"file":"Service Docker.md","fileName":"Service Docker","comments":true,"title":"Service Docker","permalink":"service-docker","datePublished":"2021-05-17T17:32","dateUpdated":"2021-05-17T17:32","publish":true,"rss":true,"aliases":["Docker service"]},"__N_SSG":true}