{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Pour monitorer une infrastructure, il existe Grafana et Prometheus.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Prometheus se chargera de collecter les données (CPU, RAM, DISK, etc..) des différents serveurs, et Grafana les affichera sur un dashboard.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Installer \", _jsx(_components.a, {\n        href: \"/docker-swarm\",\n        title: \"Docker Swarm\",\n        children: \"Docker Swarm\"\n      }), \" et \", _jsx(_components.a, {\n        href: \"/traefik\",\n        title: \"Traefik\",\n        children: \"Traefik\"\n      }), \" puis créez et démarrez la stack Docker \", _jsx(_components.code, {\n        children: \"monitoring.yml\"\n      }), \" :\"]\n    }), \"\\n\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yaml\",\n        children: \"# monitoring.yml\\nversion: '3.8'\\n\\nservices:\\n  prometheus:\\n    image: prom/prometheus:v2.27.0\\n    entrypoint: /bin/sh -c '/bin/sh -c \\\"$${@}\\\"'\\n    command:\\n      - /bin/sh\\n      - -c\\n      - |\\n        chown -R 65534:root /prometheus\\n        wget --no-cache -qnc https://raw.githubusercontent.com/johackim/stacks/v2/configs/prometheus.yml -O /etc/prometheus/prometheus.yml\\n        prometheus --config.file=/etc/prometheus/prometheus.yml \\\\\\n        --storage.tsdb.path=/prometheus \\\\\\n        --storage.tsdb.retention.time=7d \\\\\\n        --web.console.libraries=/usr/share/prometheus/console_libraries \\\\\\n        --web.console.templates=/usr/share/prometheus/consoles \\\\\\n        --web.route-prefix=/prometheus \\\\\\n        --web.external-url=${SCHEME:-http}://${DOMAIN:-grafana.localhost}/prometheus\\n    volumes:\\n      - ${VOLUME_PATH}prometheus:/prometheus\\n      - ${VOLUME_PATH}config:/etc/prometheus/\\n    deploy:\\n      labels:\\n        - traefik.enable=true\\n        - traefik.http.routers.grafana-prom-${NUMBER:-1}.rule=Host(`${DOMAIN:-grafana.localhost}`) && PathPrefix(`/prometheus/`)\\n        - traefik.http.routers.grafana-prom-${NUMBER:-1}.entrypoints=${SCHEME:-http}\\n        - traefik.http.routers.grafana-prom-${NUMBER:-1}.service=grafana-prom-${NUMBER:-1}\\n        - traefik.http.routers.grafana-prom-${NUMBER:-1}.tls.certresolver=letsencrypt\\n        - traefik.http.services.grafana-prom-${NUMBER:-1}.loadbalancer.server.port=9090\\n        - traefik.http.routers.grafana-prom-${NUMBER:-1}.middlewares=grafana-prom-${NUMBER:-1}-auth\\n        - traefik.http.middlewares.grafana-prom-${NUMBER:-1}-auth.basicauth.users=${PROMETHEUS_USER:-admin}:${PROMETHEUS_PASSWORD:-htpasswd}\\n    networks:\\n      - internal\\n      - traefik\\n\\n  grafana:\\n    image: grafana/grafana:7.5.6\\n    user: root\\n    environment:\\n      - GF_SMTP_ENABLED=true\\n      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM:-noreply@example.com}\\n      - GF_SMTP_HOST=${SMTP_HOST:-mail.service.host:587}\\n      - GF_SMTP_PASSWORD=${SMTP_PASSWORD:-myp@ssw0rd}\\n      - GF_SMTP_USER=${SMTP_USERNAME:-noreply@example.com}\\n      - GF_SERVER_ROOT_URL=${SCHEME:-http}://${DOMAIN:-grafana.localhost}\\n    volumes:\\n      - ${VOLUME_PATH}grafana:/var/lib/grafana\\n    deploy:\\n      labels:\\n        - traefik.enable=true\\n        - traefik.http.routers.grafana-${NUMBER:-1}.rule=Host(`${DOMAIN:-grafana.localhost}`)\\n        - traefik.http.routers.grafana-${NUMBER:-1}.entrypoints=${SCHEME:-http}\\n        - traefik.http.routers.grafana-${NUMBER:-1}.service=grafana-${NUMBER:-1}\\n        - traefik.http.routers.grafana-${NUMBER:-1}.tls.certresolver=letsencrypt\\n        - traefik.http.services.grafana-${NUMBER:-1}.loadbalancer.server.port=3000\\n    networks:\\n      - internal\\n      - traefik\\n\\n  cadvisor:\\n    image: gcr.io/cadvisor/cadvisor:v0.37.5\\n    command: -docker_only=true\\n    volumes:\\n      - /:/rootfs:ro\\n      - /var/run:/var/run:rw\\n      - /sys:/sys:ro\\n      - /var/lib/docker/:/var/lib/docker:ro\\n    deploy:\\n      mode: global\\n    networks:\\n      - internal\\n\\n  node-exporter:\\n    image: prom/node-exporter:v1.1.2\\n    hostname: \\\"{{.Node.Hostname}}\\\"\\n    volumes:\\n      - /sys:/host/sys:ro\\n      - /:/rootfs:ro\\n      - /proc:/host/proc:ro\\n      - /etc/hostname:/etc/hostname\\n      - /mnt:/mnt:ro\\n    environment:\\n      - NODE_ID={{.Node.ID}}\\n    command:\\n      - '--path.sysfs=/host/sys'\\n      - '--path.procfs=/host/proc'\\n      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'\\n      - '--no-collector.ipvs'\\n    deploy:\\n      mode: global\\n      resources:\\n        limits:\\n          memory: 128M\\n        reservations:\\n          memory: 64M\\n    networks:\\n      - internal\\n\\nvolumes:\\n  config:\\n  grafana:\\n  prometheus:\\n\\nnetworks:\\n  internal:\\n    driver: overlay\\n    attachable: true\\n  traefik:\\n    external: true\\n    name: traefik-net\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"PS: Si vous souhaitez accéder à Grafana en http plutôt qu'en https, commentez la ligne \", _jsx(_components.code, {\n        children: \"traefik.http.routers.grafana.tls.certresolver=letsencrypt\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker stack deploy -c monitoring.yml monitoring\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Une fois installé vous pouvez vous rendre sur \", _jsx(_components.a, {\n        href: \"http://grafana.localhost\",\n        children: \"http://grafana.localhost\"\n      }), \" avec les identifiants \", _jsx(_components.code, {\n        children: \"admin:admin\"\n      }), \" et ajoutez prometheus en tant que Data Source.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Vous pouvez ensuite ajouter un dashboard pour monitorer vos serveurs (Conteneurs, CPU, RAM, stockage, etc...).\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Voici \", _jsx(_components.a, {\n        href: \"https://drive.proton.me/urls/Z1YKM1G9ZW#W8MCYJZH33f3\",\n        children: \"mon Dashboard\"\n      }), \" si vous souhaitez vous en inspirer.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"datePublished":"2021-05-17T17:32","dateUpdated":"2021-05-17T17:32","permalink":"installer-grafana-et-prometheus-avec-docker-swarm","publish":true,"rss":true},"scope":{}},"isIndex":false,"file":"Installer Grafana et Prometheus avec Docker Swarm.md","fileName":"Installer Grafana et Prometheus avec Docker Swarm","comments":true,"title":"Installer Grafana et Prometheus avec Docker Swarm","permalink":"installer-grafana-et-prometheus-avec-docker-swarm","datePublished":"2021-05-17T17:32","dateUpdated":"2021-05-17T17:32","publish":true,"rss":true},"__N_SSG":true}