{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    circle: \"circle\",\n    code: \"code\",\n    div: \"div\",\n    h2: \"h2\",\n    hr: \"hr\",\n    li: \"li\",\n    line: \"line\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    svg: \"svg\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.blockquote, {\n      className: \"callout info\",\n      children: [\"\\n                    \\n                        \", _jsxs(_components.div, {\n        className: \"callout-title\",\n        children: [\"\\n                            \", _jsx(_components.div, {\n          className: \"callout-icon\",\n          children: _jsxs(_components.svg, {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            width: \"24\",\n            height: \"24\",\n            viewBox: \"0 0 24 24\",\n            fill: \"none\",\n            stroke: \"currentColor\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            children: [_jsx(_components.circle, {\n              cx: \"12\",\n              cy: \"12\",\n              r: \"10\"\n            }), _jsx(_components.line, {\n              x1: \"12\",\n              y1: \"16\",\n              x2: \"12\",\n              y2: \"12\"\n            }), _jsx(_components.line, {\n              x1: \"12\",\n              y1: \"8\",\n              x2: \"12.01\",\n              y2: \"8\"\n            })]\n          })\n        }), \"\\n                            \", _jsx(_components.div, {\n          className: \"callout-title-inner\",\n          children: \"info\"\n        }), \"\\n                        \"]\n      }), \"\\n                    \\n                    \", _jsxs(_components.div, {\n        className: \"callout-content\",\n        children: [\"\\n                        \", _jsx(_components.p, {\n          children: \"Contenu archivé\"\n        }), \"\\n                    \"]\n      }), \"\\n                \"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Afin d'éviter de réinstaller manuellement \", _jsx(_components.a, {\n        href: \"/arch-linux\",\n        title: \"Arch Linux\",\n        className: \"not-found\",\n        children: \"Arch Linux\"\n      }), \" chaque année j'ai automatisé son installation à l'aide d'un fichier makefile. Fini la configuration manuelle de LVM, LUKS, UEFI, Grub, Nvidia, Alsa, Xorg, i3, vim, tmux, mutt, gtk etc...\"]\n    }), \"\\n\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.strong, {\n        children: [\"ATTENTION ! Les commandes \", _jsx(_components.code, {\n          children: \"make\"\n        }), \" décrites dans cet article ont été créé seulement pour mon usage personnel, elles seront mises à jour plus tard pour un usage plus général. Je vous conseille de lire le fichier makefile si vous souhaitez les utiliser.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TL;DR\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://github.com/johackim/dotfiles\",\n        children: \"https://github.com/johackim/dotfiles\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Étapes d'installation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"De manière générale l'installation de \", _jsx(_components.a, {\n        href: \"/arch-linux\",\n        title: \"Arch Linux\",\n        className: \"not-found\",\n        children: \"Arch Linux\"\n      }), \" comprend de nombreuses étapes :\"]\n    }), \"\\n\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Création, formatage et chiffrement des partitions\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", \"Installation des fichiers de base de \", _jsx(_components.a, {\n          href: \"/arch-linux\",\n          title: \"Arch Linux\",\n          className: \"not-found\",\n          children: \"Arch Linux\"\n        }), \"\\n\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Configuration du fichier \", _jsx(_components.code, {\n          children: \"/etc/fstab\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Configuration du clavier (\", _jsx(_components.code, {\n          children: \"/etc/vconsole.conf\"\n        }), \")\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Configuration du hostname\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Configuration du fuseau horaire (\", _jsx(_components.code, {\n          children: \"/etc/localtime\"\n        }), \")\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Configuration de l'heure\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Configuration de la langue\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Configuration du bootloader grub\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Configuration du mot de passe root\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Configuration du dépôt multilib\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Configuration de sudo\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Configuration des services\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Installation d'un package manager pour AUR (Arch User Repository)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Installation du serveur graphique Xorg\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Installation des drivers graphique (Nvidia, Intel)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Installation des drivers audio (alsa, pulseaudio)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Installation d'un gestionnaire de réseau (NetworkManager)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Installation d'un gestionnaire de fenêtre léger (i3)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Installation de mes packages\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"J'ai créé un \", _jsx(_components.a, {\n        href: \"https://github.com/johackim/dotfiles/blob/3670f49216c8ffc70e1ea2f79617f12c681cbade/makefile\",\n        children: \"fichier makefile\"\n      }), \" qui contient toutes les commandes shell à exécuter lors de l'installation. Dorénavant, si je souhaite faire une installation complète, j'ai uniquement 2 commandes à entrer, une pour la création des partitions et l'autre pour l'installation de \", _jsx(_components.a, {\n        href: \"/arch-linux\",\n        title: \"Arch Linux\",\n        className: \"not-found\",\n        children: \"Arch Linux\"\n      }), \".\"]\n    }), \"\\n\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"make create-new-partitions\\nmake install-new-arch\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Dans le cas où mon système plante ou que je souhaite simplement réinstaller Arch Linux, seul la commande \", _jsx(_components.code, {\n        children: \"make install-new-arch\"\n      }), \" suffit. Les partitions \", _jsx(_components.code, {\n        children: \"root\"\n      }), \", \", _jsx(_components.code, {\n        children: \"boot\"\n      }), \" et \", _jsx(_components.code, {\n        children: \"efi\"\n      }), \" seront réinitialisés et la partition \", _jsx(_components.code, {\n        children: \"home\"\n      }), \" restera intacte.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Dotfiles\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Toutes les configurations de mes applications (vim, tmux, mutt, i3, gtk etc..) mes raccourcis clavier, mes aliases, mon thème (fonts, fond d'écran, icons, les couleurs, etc...) sont personnalisés et versionnés. Une simple commande permet de tout installer :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"make install-dotfiles\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Conclusion\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Créer une clé USB bootable de \", _jsx(_components.a, {\n          href: \"https://archlinux.org/download/\",\n          children: \"Arch Linux\"\n        }), \" avec \", _jsx(_components.a, {\n          href: \"https://github.com/balena-io/etcher\",\n          children: \"etcher\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Booter son ordinateur sur la clé bootable\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Connecter l'ordinateur à internet avec la command \", _jsx(_components.code, {\n          children: \"wifi-menu\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Installer les packages git et make avec la commande \", _jsx(_components.code, {\n          children: \"pacman -S git make\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Cloner le repository avec la commande \", _jsx(_components.code, {\n          children: \"git clone https://github.com/johackim/dotfiles\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Éxecuter les commandes \", _jsx(_components.code, {\n          children: \"make create-new-partitions\"\n        }), \" et \", _jsx(_components.code, {\n          children: \"make install-new-arch\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Je dispose d'un seul \", _jsx(_components.a, {\n        href: \"https://github.com/johackim/dotfiles\",\n        children: \"dépôt\"\n      }), \" qui contient toute la configuration de mon PC. Pratique non ?\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"Références :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/johackim/dotfiles\",\n          children: \"https://github.com/johackim/dotfiles\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://gist.github.com/mattiaslundberg/8620837\",\n          children: \"https://gist.github.com/mattiaslundberg/8620837\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/helmuthdu/aui\",\n          children: \"https://github.com/helmuthdu/aui\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/MatMoul/archfi\",\n          children: \"https://github.com/MatMoul/archfi\"\n        })\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.a, {\n          href: \"/arch-linux\",\n          title: \"Arch Linux\",\n          className: \"not-found\",\n          children: \"Arch Linux\"\n        }), \"\\n\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"title":"Comment automatiser l'installation de Arch Linux ?","permalink":"comment-automatiser-installation-arch-linux","datePublished":"2018-07-30T12:45","dateUpdated":"2018-07-30T12:45","description":"Afin d'éviter de réinstaller manuellement Arch Linux chaque année j'ai automatisé son installation à l'aide d'un fichier makefile.","publish":true,"rss":true},"scope":{}},"isIndex":false,"file":"Automatiser l'installation de Arch Linux.md","fileName":"Automatiser l'installation de Arch Linux","comments":true,"title":"Comment automatiser l'installation de Arch Linux ?","permalink":"comment-automatiser-installation-arch-linux","datePublished":"2018-07-30T12:45","dateUpdated":"2018-07-30T12:45","description":"Afin d'éviter de réinstaller manuellement Arch Linux chaque année j'ai automatisé son installation à l'aide d'un fichier makefile.","publish":true,"rss":true},"__N_SSG":true}