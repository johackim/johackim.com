{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    hr: \"hr\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Pour créer un thème dark avec \", _jsx(_components.a, {\n        href: \"https://gatsbyjs.com/\",\n        children: \"Gatsby\"\n      }), \" et \", _jsx(_components.a, {\n        href: \"https://tailwindcss.com/\",\n        children: \"TailwindCSS\"\n      }), \", une fois que vous avez \", _jsx(_components.a, {\n        href: \"/initialiser-un-projet-gatsby\",\n        title: \"initialisé Gatsby\",\n        children: \"initialisé Gatsby\"\n      }), \" et \", _jsx(_components.a, {\n        href: \"/integrer-tailwind-css-a-gatsby\",\n        title: \"paramétré Tailwind CSS\",\n        children: \"paramétré Tailwind CSS\"\n      }), \", il vous faut simplement installer le package \", _jsx(_components.code, {\n        children: \"react-helmet\"\n      }), \" et créer 3-4 fichiers.\"]\n    }), \"\\n\\n\", _jsx(_components.h2, {\n      children: \"1. Installer react-helmet\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Installer le package react-helmet pour pouvoir overrider la classe de votre balise \", _jsx(_components.code, {\n        children: \"html\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"yarn add -D react-helmet gatsby-plugin-react-helmet\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// gatsby-config.js\\n\\nmodule.exports = {\\n    plugins: [\\n        // ...\\n        'gatsby-plugin-react-helmet',\\n    ],\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"2. Activer le darkMode dans Tailwind CSS\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Dans le fichier \", _jsx(_components.code, {\n        children: \"tailwind.config.js\"\n      }), \", activez le darkMode en lui attribuant la valeur \", _jsx(_components.code, {\n        children: \"class\"\n      }), \", cela permettra de prendre en compte les classes html \", _jsx(_components.code, {\n        children: \"dark:\"\n      }), \" :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"// tailwind.config.js\\n\\nmodule.exports = {\\n    darkMode: 'class',\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3. Créer un Switch button\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Créez un composant \", _jsx(_components.code, {\n        children: \"switch.js\"\n      }), \", il contient le button qui peut alterner votre dark mode :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// src/components/switch.js\\n\\nimport React, { useState, useEffect } from 'react';\\n\\nconst isBrowser = () => typeof window !== 'undefined';\\n\\nconst getItem = (name) => isBrowser() && localStorage.getItem(name);\\n\\nconst setItem = (name, item) => isBrowser() && localStorage.setItem(name, item);\\n\\nexport default ({ onChange }) => {\\n    const [darkMode, setDarkMode] = useState(getItem('darkMode') === 'true' || (isBrowser() && window.matchMedia('(prefers-color-scheme: dark)').matches));\\n\\n    useEffect(() => {\\n        setItem('darkMode', darkMode);\\n        onChange(darkMode);\\n    }, [darkMode]);\\n\\n    return (\\n        <button type=\\\"button\\\" className=\\\"border px-2\\\" onClick={() => setDarkMode(!darkMode)}>Switch</button>\\n    );\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Intégrez votre composant \", _jsx(_components.code, {\n        children: \"Switch\"\n      }), \" dans votre page Gatsby \", _jsx(_components.code, {\n        children: \"index.js\"\n      }), \" :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-javascript\",\n        children: \"// src/pages/index.js\\n\\nimport React, { useState } from 'react';\\nimport Helmet from 'react-helmet';\\n\\nimport Switch from '../components/switch';\\n\\nconst IndexPage = () => {\\n    const [darkMode, setDarkMode] = useState(typeof window !== 'undefined' && localStorage.getItem('darkMode') === 'true');\\n\\n    return (\\n        <>\\n            <Helmet\\n                htmlAttributes={{ class: darkMode ? 'dark' : 'light' }}\\n                bodyAttributes={{ class: 'dark:bg-gray-900 dark:text-gray-300' }}\\n            />\\n            <Switch onChange={(isDark) => setDarkMode(isDark)} />\\n        </>\\n    );\\n};\\n\\nexport default IndexPage;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"4. Créer un fichier gatsby-ssr.js (facultatif)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Cette étape est facultatif, mais elle permet d'améliorer la vitesse de rendu du thème dark.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// gatsby-ssr.js\\n\\nimport React from 'react';\\n\\nexport { wrapRootElement } from './gatsby-browser';\\n\\nexport const onRenderBody = ({ setPreBodyComponents }) => {\\n    const setColorsByTheme = () => {\\n        const darkMode = localStorage.getItem('darkMode') === 'true' || window.matchMedia('(prefers-color-scheme: dark)').matches;\\n        document.documentElement.className = darkMode ? 'dark' : 'light';\\n    };\\n\\n    const calledFunction = `(${setColorsByTheme})()`;\\n    setPreBodyComponents(<script key=\\\"darkMode\\\" dangerouslySetInnerHTML={{ __html: calledFunction }} />);\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"Références :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://joshwcomeau.com/react/dark-mode/\",\n          children: \"https://joshwcomeau.com/react/dark-mode/\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/insin/gatsby-plugin-dark-mode/\",\n          children: \"https://github.com/insin/gatsby-plugin-dark-mode/\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"datePublished":"2021-11-15T09:33","dateUpdated":"2021-11-15T09:33","permalink":"creer-un-mode-dark-avec-gatsby-et-tailwind-css","publish":true,"rss":true},"scope":{}},"isIndex":false,"file":"Créer un mode dark avec Gatsby et Tailwind CSS.md","fileName":"Créer un mode dark avec Gatsby et Tailwind CSS","comments":true,"title":"Créer un mode dark avec Gatsby et Tailwind CSS","permalink":"creer-un-mode-dark-avec-gatsby-et-tailwind-css","datePublished":"2021-11-15T09:33","dateUpdated":"2021-11-15T09:33","publish":true,"rss":true},"__N_SSG":true}