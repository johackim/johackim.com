{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    hr: \"hr\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Voici une solution pour pouvoir jouer aux jeux vidéos depuis un environnement \", _jsx(_components.a, {\n        href: \"/linux\",\n        title: \"Linux\",\n        children: \"Linux\"\n      }), \" avec 95% de performance native.\"]\n    }), \"\\n\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://youtube.com/watch?v=37D2bRsthfI\",\n        children: \"Une vidéo de démonstration par blu3bird84\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Terminologies\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Avant toute chose, il y a quelques terminologies à connaitre :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"KVM\"\n        }), \" (Kernel-based Virtual Machine) est le module du noyau Linux qui interagit avec les fonctionnalités de virtualisation du processeur. C'est un hyperviseur de type I pour Linux.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"QEMU\"\n        }), \" est le logiciel de virtualisation basé sur KVM qui émule les processeurs virtuels et les périphériques et qui lance et éteint les machines virtuelles.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"virt-manager\"\n        }), \" est l'interface graphique qui permet de créer, configurer, et faire tourner les machines virtuelles.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"libvirt\"\n        }), \" est la bibliothèque qui permet à virt-manager d'interagir avec les capacités de virtualisation fournies par QEMU.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"virtio\"\n        }), \" est une interface de programmation qui gère toutes les communications entre l'hyperviseur et le noyau.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"OVMF\"\n        }), \" (Open Virtual Machine Firmware) est un projet pour permettre le support de l‘UEFI aux machines virtuelles.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"vfio\"\n        }), \" Virtual Function I/O\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"IOMMU\"\n        }), \" Unité de gestion de mémoire d'entrée-sortie\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prérequis\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Avoir deux Carte-graphiques ou 1 Apu et une Carte-graphique\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Votre carte mère doit supporter la technologie IOMMU\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Votre CPU doit supporter la virtualisation matérielle\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Votre carte graphique doit supporter l’UEFI\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Avoir 2 Entrées vidéo sur l'écran (1 pour le linux (host) et 1 pour la Machine virtuelle (Guest)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Installation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"L'installation que je propose ici est spécifiquement prévue pour \", _jsx(_components.strong, {\n        children: \"Arch Linux\"\n      }), \" ou une distribution basé dessus comme \", _jsx(_components.strong, {\n        children: _jsx(_components.a, {\n          href: \"https://antergos.com/\",\n          children: \"Antergos\"\n        })\n      }), \". Cette procédure aura pour but d'installer un environnement \", _jsx(_components.strong, {\n        children: \"Qemu/KVM + VFIO/IOMMU GPU Passthrough\"\n      }), \" afin de pouvoir jouer aux jeux depuis Linux sur une \", _jsx(_components.strong, {\n        children: \"machine virtuelle\"\n      }), \" Windows.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Activer IOMMU\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"# /etc/default/grub\\nGRUB_CMDLINE_LINUX_DEFAULT=\\\"quiet splash intel_iommu=on\\\"\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"grub-mkconfig -o /boot/grub/grub.cfg\\ndmesg|grep -e DMAR -e IOMMU # Vérifier l'activation de IOMMU\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Installer libvirt, qemu, virt-manager et OVMF\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"pacman -S dnsmasq ebtables dmidecode # libvirt dependencies\\npacman -S qemu ovmf virt-manager\\npacman -S libvirt\\nusermod -aG libvirt username\\nsystemctl enable libvirtd\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Configurer qemu\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"mv /etc/libvirt/qemu.conf /etc/libvirt/qemu.conf.orig\\ncat <<EOT >> /etc/libvirt/qemu.conf\\nuser = \\\"root\\\"\\ngroup = \\\"root\\\"\\nclear_emulator_capabilities = 0\\ncgroup_device_acl = [\\n    \\\"/dev/null\\\", \\\"/dev/full\\\", \\\"/dev/zero\\\",\\n    \\\"/dev/random\\\", \\\"/dev/urandom\\\",\\n    \\\"/dev/ptmx\\\", \\\"/dev/kvm\\\", \\\"/dev/kqemu\\\",\\n    \\\"/dev/rtc\\\",\\\"/dev/hpet\\\", \\\"/dev/vfio/vfio\\\",\\n    \\\"/dev/vfio/1\\\"\\n]\\nnvram = [\\n  \\\"/usr/share/ovmf/x64/OVMF_CODE.fd:/usr/share/ovmf/x64/OVMF_VARS.fd\\\"\\n]\\nEOT\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Installer vfio\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"lspci -nn|grep -iP \\\"NVIDIA|Radeon\\\" # $VFIOID\\necho options vfio-pci ids=$VFIOID > /etc/modprobe.d/vfio.conf\\n\\nMODULES=\\\"vfio vfio_iommu_type1 vfio_pci vfio_virqfd\\\" # /etc/mkinitcpio.conf\\nmkinitcpio -p linux\\n\\nlspci -k | grep -i vfio-pci # Check vfio\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Installer virtio\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"pacaur -S virtio-win\\necho -e 'virtio\\\\virtio_blk\\\\virtio_pci\\\\virtio_net' | sudo tee /etc/modules-load.d/virtio.conf\\nlsmod | grep virtio # Check virtio modules\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Configuration de la machine virtuelle\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Une fois que l'environnement est prêt, il faut créer et configurer notre machine virtuelle avec \", _jsx(_components.code, {\n        children: \"virt-manager\"\n      }), \". Plutôt que de mettre une centaine de screenshots voici une vidéo (en anglais) qui donne étape par étape la configuration de notre machine virtuelle.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://youtube.com/watch?v=6FI31QDtyy4\",\n        children: \"Configuration d'une machine virtuelle Windows avec virt-manager\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Configuration réseau\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour configurer une connexion réseau sur votre machine virtuelle :\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Edit -> Connection Details -> Virtual Networks -> Add Network\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Create \\\"br0\\\" virtual network with \\\"Forwarding to physical network\\\" option and Physical device wlp59s0\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"virsh edit <VM_name>\"\n        }), \" and add :\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-config\",\n        children: \"<interface type='network'>\\n  <mac address='53:54:00:b8:65:3d'/>\\n  <source network='br0'/>\\n</interface>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Ma configuration\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Si vous avez suivie toutes les étapes, vous devriez avoir votre machine virtuelle prête à l'emploi pour jouer à vos jeux préférés.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"De mon côté, j'ai un Laptop, ce qui implique \", _jsx(_components.a, {\n        href: \"https://gist.github.com/Misairu-G/616f7b2756c488148b7309addc940b28\",\n        children: \"une configuration particulière\"\n      }), \". Pour le moment, je peux seulement lancer ma VM avec un serveur VNC, je n’ai pas réussi à rendre fonctionnelle ma sortie HDMI sur un écran :(.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Voilà à quoi ressemble ma configuration :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"sudo /usr/sbin/qemu-system-x86_64 \\\\\\n-cpu host,kvm=off \\\\\\n-enable-kvm \\\\\\n-m 4096 \\\\\\n-smp cores=4,threads=2 \\\\\\n-device vfio-pci,host=01:00.0 \\\\\\n-drive if=pflash,format=raw,readonly,file=/usr/share/ovmf/x64/OVMF_CODE.fd \\\\\\n-drive if=pflash,format=raw,file=/usr/share/ovmf/x64/OVMF_VARS.fd \\\\\\n-drive file=/var/lib/libvirt/images/win10.qcow2,format=qcow2,if=none,id=disk0,cache=writeback \\\\\\n-device virtio-blk-pci,scsi=off,bus=pci.0,addr=0x8,drive=disk0,id=virtio-disk0,bootindex=1 \\\\\\n-netdev type=tap,script=no,downscript=no,id=net0,ifname=tap2 \\\\\\n-device virtio-net-pci,netdev=net0,disable-legacy=on,iommu_platform=true,romfile= \\\\\\n-boot menu=on\\n\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"Références :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF\",\n          children: \"https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://wiki.archlinux.fr/PCI_passthrough_avec_OMVF\",\n          children: \"https://wiki.archlinux.fr/PCI_passthrough_avec_OMVF\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://medium.com/@dubistkomisch/7c395dde5c2\",\n          children: \"https://medium.com/@dubistkomisch/7c395dde5c2\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://davidyat.es/2016/09/08/gpu-passthrough/\",\n          children: \"https://davidyat.es/2016/09/08/gpu-passthrough/\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://wiki.installgentoo.com/index.php/PCI_passthrough\",\n          children: \"https://wiki.installgentoo.com/index.php/PCI_passthrough\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://clubnix.fr/blog-post/fira/notes-actuelles-sur-le-passthrough-vga\",\n          children: \"https://clubnix.fr/blog-post/fira/notes-actuelles-sur-le-passthrough-vga\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://gist.github.com/Misairu-G/616f7b2756c488148b7309addc940b28\",\n          children: \"https://gist.github.com/Misairu-G/616f7b2756c488148b7309addc940b28\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://linuxserver.io/2017/04/28/how-to-setup-vfio-gpu-passthrough-using-ovmf-and-kvm-on-arch-linux/\",\n          children: \"https://linuxserver.io/2017/04/28/how-to-setup-vfio-gpu-passthrough-using-ovmf-and-kvm-on-arch-linux/\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://docs.fedoraproject.org/quick-docs/en-US/creating-windows-virtual-machines-using-virtio-drivers.html\",\n          children: \"https://docs.fedoraproject.org/quick-docs/en-US/creating-windows-virtual-machines-using-virtio-drivers.html\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://youtu.be/dsDUtzMkxFk\",\n          children: \"GrayWolfTech - Play games in Windows on Linux! PCI passthrough quick guide\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://youtu.be/6FI31QDtyy4\",\n          children: \"Tymscar - Native Performance Windows Games On Linux Quick GPU Passthrough\"\n        })\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.a, {\n          href: \"/jeux-videos\",\n          title: \"Jeux vidéos\",\n          className: \"not-found\",\n          children: \"Jeux vidéos\"\n        }), \"\\n\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"title":"Comment jouer sur Linux avec 95% de performance native ?","permalink":"jouer-sur-linux","datePublished":"2018-03-26T05:53","dateUpdated":"2018-03-26T05:53","description":"Voici une solution pour pouvoir jouer aux jeux video depuis un environnement Linux avec 95% de performance native.","aliases":["Comment jouer sur Linux avec 95% de performance native ?"],"publish":true,"rss":true},"scope":{}},"isIndex":false,"file":"Jouer sur Linux avec 95% de performance native.md","fileName":"Jouer sur Linux avec 95% de performance native","comments":true,"title":"Comment jouer sur Linux avec 95% de performance native ?","permalink":"jouer-sur-linux","datePublished":"2018-03-26T05:53","dateUpdated":"2018-03-26T05:53","description":"Voici une solution pour pouvoir jouer aux jeux video depuis un environnement Linux avec 95% de performance native.","aliases":["Comment jouer sur Linux avec 95% de performance native ?"],"publish":true,"rss":true},"__N_SSG":true}