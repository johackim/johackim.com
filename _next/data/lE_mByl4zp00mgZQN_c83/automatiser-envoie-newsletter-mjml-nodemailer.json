{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Cet article est destiné à toutes les personnes souhaitant automatiser l'envoie de leur newsletter avec de jolis e-mails \", _jsx(_components.strong, {\n        children: \"responsive\"\n      }), \" et la possibilité d'injecter du contenue \", _jsx(_components.strong, {\n        children: \"dynamiquement\"\n      }), \" comme les derniers articles d'un blog.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Mon blog \", _jsx(_components.a, {\n        href: \"https://ghost.org/\",\n        children: \"ghost\"\n      }), \" permet de stocker les emails des subscribers, mais pas la création ni l'envoi d'une \", _jsx(_components.strong, {\n        children: \"newsletter\"\n      }), \". En attendant cette feature, je me suis fait un petit script maison pour \", _jsx(_components.strong, {\n        children: \"automatiser l'envoi des 4 derniers articles de mon blog\"\n      }), \" chaque mois.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Ce script nodejs va tout simplement parser mon \", _jsx(_components.a, {\n        href: \"https://johackim.com/rss/\",\n        children: \"flux RSS\"\n      }), \" et injecter les articles dans un template \", _jsx(_components.strong, {\n        children: \"mjml\"\n      }), \" créé sur \", _jsx(_components.a, {\n        href: \"https://mjml.io/try-it-live\",\n        children: \"mjml.io\"\n      }), \" (framework qui permet de créer très facilement des emails responsive) qui sera envoyé chaque mois aux subscribers de mon blog via \", _jsx(_components.strong, {\n        children: \"nodemailer\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-javascript\",\n        children: \"import nodemailer from 'nodemailer';\\nimport dotenv from 'dotenv';\\nimport { mjml2html } from 'mjml';\\nimport feedparser from 'feedparser-promised';\\nimport Papa from 'papaparse';\\nimport fs from 'fs';\\nimport Newsletter from './newsletter';\\n\\ndotenv.config({ silent: true });\\n\\n(async () => {\\n    const articles = (await feedparser.parse(process.env.FEED_URL)).map(item => ({\\n        title: item.title,\\n        href: item.link,\\n        tag: item.categories[0],\\n        image: item.enclosures[0].url,\\n    })).slice(0, process.env.NUMBER_ARTICLES);\\n\\n    const newsletter = Newsletter(articles);\\n    const htmlOutput = mjml2html(newsletter).html;\\n\\n    if (process.env.NODE_ENV === 'test') {\\n        fs.writeFileSync('newsletter.html', htmlOutput);\\n        process.exit(0);\\n    }\\n\\n    const transporter = nodemailer.createTransport({\\n        port: process.env.MAIL_PORT,\\n        host: process.env.MAIL_HOST,\\n        tls: process.env.MAIL_TLS,\\n        auth: {\\n            user: process.env.MAIL_USER,\\n            pass: process.env.MAIL_PASS,\\n        },\\n    });\\n\\n    const mailOptions = {\\n        from: process.env.MAIL_FROM,\\n        subject: process.env.MAIL_SUBJECT,\\n        html: htmlOutput,\\n    };\\n\\n    const subscribersCsvFile = fs.readFileSync(process.env.SUBSCRIBERS_FILE_PATH).toString();\\n    const subscribers = Papa.parse(subscribersCsvFile, { header: true }).data;\\n    const emails = subscribers.filter(subscriber => subscriber.email).map(subscriber => subscriber.email);\\n\\n    emails.forEach((email) => {\\n        transporter.sendMail({ ...mailOptions, to: email });\\n    });\\n})();\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Les variables d'environnement à éditer se situent dans le fichier \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-env\",\n        children: \"MAIL_HOST=mail.domain.com\\nMAIL_USER=contact@domain.com\\nMAIL_PASS=password\\nMAIL_PORT=587\\nMAIL_FROM=\\\"username <contact@domain.com>\\\"\\nMAIL_SUBJECT=\\\"Newsletter\\\"\\nMAIL_TLS=true\\nFEED_URL=http://domain.com/feed/\\nSUBSCRIBERS_FILE_PATH=subscribers.csv\\nNUMBER_ARTICLES=4\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Si vous ne souhaitez pas écrire en dur votre mot de passe dans ce fichier, vous pouvez le déclarer de cette façon :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"MAIL_PASS=password npm start\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ce code source est écrit pour un cas spécifique, mais il peut être adapté très facilement selon vos besoins. Il s'agit ici de seulement 50 lignes de code et d'un template mjml à adapter. Si vous désirez plus d'amélioration faite en part dans les commentaires ;).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Voilà, il est possible de l'automatiser avec une tâche cron et vous avez une newsletter qui envoie chaque mois les derniers articles de votre blog :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cron\",\n        children: \"0 0 1 * * npm start --prefix <PATH_DIRECTORY>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Si vous souhaitez simplement tester le rendu de votre newsletter sans envoyer de mails :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"npm test # Generate newsletter.html\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Le code source est disponible en détails sur \", _jsx(_components.a, {\n        href: \"https://github.com/johackim/newsletter\",\n        children: \"ce dépôt github\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"title":"Automatiser l'envoie d'une newsletter avec mjml et nodemailer","permalink":"automatiser-envoie-newsletter-mjml-nodemailer","datePublished":"2017-11-27T08:00","dateUpdated":"2017-11-27T08:00","description":"Cet article est destiné à toutes les personnes souhaitant automatiser l'envoie de leur newsletter avec de jolis e-mails responsive et la possibilité d'injecter du contenue dynamiquement comme les derniers articles d'un blog.","publish":true,"rss":true},"scope":{}},"isIndex":false,"file":"MJML.md","fileName":"MJML","comments":true,"title":"Automatiser l'envoie d'une newsletter avec mjml et nodemailer","permalink":"automatiser-envoie-newsletter-mjml-nodemailer","datePublished":"2017-11-27T08:00","dateUpdated":"2017-11-27T08:00","description":"Cet article est destiné à toutes les personnes souhaitant automatiser l'envoie de leur newsletter avec de jolis e-mails responsive et la possibilité d'injecter du contenue dynamiquement comme les derniers articles d'un blog.","publish":true,"rss":true},"__N_SSG":true}