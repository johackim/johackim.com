{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Pour créer une \", _jsx(_components.strong, {\n        children: \"stack Docker\"\n      }), \", il suffit de créer un fichier YAML qui contient les détails des services Docker à démarrer (image, volumes, ports, labels, etc...) :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yaml\",\n        children: \"# ghost.yml\\nversion: '3.8'\\n\\nservices:\\n  web:\\n    image: ghost:latest\\n    ports:\\n      - {target: 2368, published: 2368, mode: host}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"On peut démarrer la stack \", _jsx(_components.code, {\n        children: \"ghost.yml\"\n      }), \" avec la commande suivante :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker stack deploy -c ghost.yml ghost\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Vous pouvez accéder à votre application Ghost à l'adresse : \", _jsx(_components.a, {\n        href: \"http://localhost:2368\",\n        children: \"http://localhost:2368\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Il est aussi possible de télécharger et d'exécuter une stack Docker via une seule ligne de commande :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker stack deploy -c <(curl -so - https://raw.githubusercontent.com/ethibox/awesome-stacks/master/stacks/etherpad.yml) etherpad\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"datePublished":"2021-05-17T17:32","dateUpdated":"2021-05-17T17:32","permalink":"stack-docker","publish":true,"rss":true},"scope":{}},"isIndex":false,"file":"Stack Docker.md","fileName":"Stack Docker","comments":true,"title":"Stack Docker","permalink":"stack-docker","datePublished":"2021-05-17T17:32","dateUpdated":"2021-05-17T17:32","publish":true,"rss":true},"__N_SSG":true}