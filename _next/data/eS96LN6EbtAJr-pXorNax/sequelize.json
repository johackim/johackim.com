{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Sequelize est un ORM Node.js qui permet de créer, éditer et supprimer des données dans une base de données (SQLite, MySQL, PostgreSQL, etc...).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"L'avantage d'un ORM, ce que notre code ne dépend pas uniquement d'un type de de base de donnée.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Installation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour installer sequelize avec SQLite, exécutez la commande suivante :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"yarn add -D sequelize sqlite3\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Configuration\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Créez un fichier \", _jsx(_components.code, {\n        children: \"models.js\"\n      }), \" avec les détails de votre base de donnée (ex: User).\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// models.js\\n\\nimport { Sequelize, DataTypes } from 'sequelize';\\n\\nconst sequelize = new Sequelize({\\n    dialect: 'sqlite',\\n    storage: `${__dirname}/db.sqlite`,\\n    query: { raw: true },\\n});\\n\\nexport const User = sequelize.define('User', {\\n    id: {\\n        type: Sequelize.INTEGER,\\n        primaryKey: true,\\n        autoIncrement: true,\\n    },\\n    name: {\\n        type: DataTypes.STRING,\\n    },\\n    email: {\\n        type: DataTypes.STRING,\\n    },\\n});\\n\\nUser.sync();\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Selection\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Pour effectuer une requête de type \", _jsx(_components.code, {\n        children: \"SELECT\"\n      }), \" :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const users = await User.findAll();\\n// ou\\nconst user = User.findOne({ where: { name: 'Marty' } });\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Mise à jour\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour mettre à jour des données :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"await User.update({ name: 'Biff' }, { where: { name: 'Marty' } });\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Suppression\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour supprimer des données :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"await User.destroy({ force: true, truncate: true, cascade: true });\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Création\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour créer un utilisateur dans la table User, exécutez le code Node.js suivant :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"await User.create({ name: 'Marty', email: 'marty@bttf.com' });\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Relation many-to-many\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Si par exemple, un utilisateur peut avoir plusieurs livres et qu'un livre peut appartenir à plusieurs utilisateurs. Il vous faut créer \", _jsx(_components.strong, {\n        children: \"une association many-to-many\"\n      }), \" dans votre fichier \", _jsx(_components.code, {\n        children: \"models.js\"\n      }), \" :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// models.js\\n\\nexport const Book = sequelize.define('book', {\\n    id: {\\n        type: Sequelize.INTEGER,\\n        primaryKey: true,\\n        autoIncrement: true,\\n    },\\n    name: { type: DataTypes.STRING },\\n});\\n\\nUser.belongsToMany(Book, { through: 'userBooks' });\\nBook.belongsToMany(User, { through: 'userBooks' });\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Cela créera une table intérmédiare \", _jsx(_components.code, {\n        children: \"userBooks\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Vous pouvez ensuite créer vos livres de cette manière :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const user = await findOne({ name: 'Marty' });\\nawait user.addBook({ name: 'Back To The Futur' });\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Et récupérez vos livres de cette manière :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const books = await User.findAll({ where: { name: 'Marty' }, include: Book, raw: false });\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ou de cette manière :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const books = await User.findAll({ include: { all: true, nested: true }, raw: false });\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Relation one-to-many\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"User.hasMany(Book);\\nBook.belongsTo(User);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Activer le mode debug\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Si vous voulez voir le détail des requêtes SQL générés, ajouter le paramètre \", _jsx(_components.code, {\n        children: \"logging\"\n      }), \" à votre fonction, exempl :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const users = await User.findAll({ logging: console.log });\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Utiliser des fonctions SQL\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Si vous avez besoin de faire une recherche avec des fonctions SQL (ex: \", _jsx(_components.code, {\n        children: \"lower()\"\n      }), \") :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"await User.findAll({\\n    where: Sequelize.where(\\n        Sequelize.fn('lower', Sequelize.col('name')),\\n        Sequelize.fn('lower', name),\\n    ),\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Définir des champs virtuels\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Au lieu de créer directement un champ dans la base de donnée, vous pouvez définir des champs virtuels afin de récupérer des valeurs personnalisés :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"import { DataTypes } from 'sequelize';\\n\\nconst User = sequelize.define('user', {\\n    firstName: DataTypes.TEXT,\\n    lastName: DataTypes.TEXT,\\n    fullName: {\\n        type: DataTypes.VIRTUAL,\\n        get() {\\n            return `${this.firstName} ${this.lastName}`;\\n        },\\n        set(value) {\\n            throw new Error('Do not try to set the `fullName` value!');\\n        }\\n    }\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Exécuter une requête manuelle\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"await sequelize.query('UPDATE apps SET updatedAt = :updatedAt WHERE id = :id', {\\n  replacements: { updatedAt, id },\\n});\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"datePublished":"2021-12-26T15:44","dateUpdated":"2022-09-12T11:57","title":"Exécutez facilement vos opérations CRUD avec Sequelize","permalink":"sequelize","publish":true,"rss":true},"scope":{}},"isIndex":false,"file":"Sequelize.md","fileName":"Sequelize","comments":true,"title":"Exécutez facilement vos opérations CRUD avec Sequelize","permalink":"sequelize","datePublished":"2021-12-26T15:44","dateUpdated":"2022-09-12T11:57","publish":true,"rss":true},"__N_SSG":true}