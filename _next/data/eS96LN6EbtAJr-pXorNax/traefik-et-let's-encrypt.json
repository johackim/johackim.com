{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Pour générer des certificats SSL, rien de mieux que Let's Encrypt pour effectuer automatiquement cette tâche.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"En rendant publiquement accessible les ports 80 et 443, \", _jsx(_components.a, {\n        href: \"/traefik\",\n        title: \"Traefik\",\n        children: \"Traefik\"\n      }), \" va automatiquement communiquer avec Let's Encrypt pour générer automatiquement des certificats SSL à chaque fois qu'un nouveau nom de domaine est relié à une application.\"]\n    }), \"\\n\\n\", _jsx(_components.h2, {\n      children: \"Vérifiez que vos ports 80 et 443 sont accessibles publiquement\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Avant de lancer Traefik, n'oubliez pas de vérifiez si vos ports 80 et 443 sont bien accessible depuis l'extérieur de votre réseau pour que Let's Encrypt puisse communiquer avec votre serveur Traefik.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Utilisez la commande \", _jsx(_components.code, {\n        children: \"curl https://ipv4.am.i.mullvad.net/port/80\"\n      }), \" (depuis votre serveur) ou \", _jsx(_components.a, {\n        href: \"https://canyouseeme.org/\",\n        children: \"https://canyouseeme.org/\"\n      }), \" pour vérifier.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Créez une zone DNS de type A\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Créez une zone DNS de type A vers l'adresse IP publique de votre serveur, exemple : \", _jsx(_components.code, {\n        children: \"ghost.example.com\"\n      }), \" -> \", _jsx(_components.code, {\n        children: \"IN A 9.9.9.9\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Pour ça, passez par le registraire de votre nom de domaine (ex: \", _jsx(_components.a, {\n        href: \"https://ovh.com/fr/\",\n        children: \"OVH\"\n      }), \", \", _jsx(_components.a, {\n        href: \"https://gandi.net/fr\",\n        children: \"Gandi\"\n      }), \", \", _jsx(_components.a, {\n        href: \"https://godaddy.com/fr-fr\",\n        children: \"GoDaddy\"\n      }), \" ou \", _jsx(_components.a, {\n        href: \"https://www.ionos.fr/domaine/noms-de-domaine\",\n        children: \"1&1\"\n      }), \").\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Démarrez Traefik avec Docker Swarm et Let's Encrypt\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Démarrez Traefik :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yaml\",\n        children: \"version: '3.8'\\n\\nservices:\\n  traefik:\\n    image: traefik:${VERSION:-2.4.8}\\n    command:\\n      - --providers.docker\\n      - --providers.docker.network=traefik-net\\n      - --providers.docker.exposedByDefault=false\\n      - --providers.docker.swarmMode=true\\n      - --providers.docker.endpoint=unix:///var/run/docker.sock\\n      - --entrypoints.http.address=:80\\n      - --entrypoints.https.address=:443\\n      - --entrypoints.http.http.redirections.entryPoint.to=https\\n      - --entrypoints.http.http.redirections.entryPoint.scheme=https\\n      - --entrypoints.http.http.redirections.entrypoint.permanent=true\\n      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true\\n      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-noreply@ethibox.fr}\\n      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json\\n    volumes:\\n      - ${VOLUME_PATH}letsencrypt:/letsencrypt\\n      - /var/run/docker.sock:/var/run/docker.sock:ro\\n    ports:\\n      - {target: 80, published: 80, mode: host, protocol: tcp}\\n      - {target: 443, published: 443, mode: host, protocol: tcp}\\n\\nvolumes:\\n  letsencrypt:\\n\\nnetworks:\\n  default:\\n    external: true\\n    name: traefik-net\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker stack deploy -c traefik.yml traefik\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Créer une application avec un nom de domaine que vous disposez (ex: ghost.example.com) :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker service create --network traefik-net \\\\\\n-l traefik.enable=true \\\\\\n-l traefik.http.routers.my-container.rule='Host(`ghost.example.com`)' \\\\\\n-l traefik.http.services.my-service.loadbalancer.server.port=2368 ghost\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Un certificat est automatiquement généré et vous pouvez à présent accéder à votre application avec le protocole HTTPS : \", _jsx(_components.code, {\n        children: \"https://ghost.example.com\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"datePublished":"2021-05-17T17:32","dateUpdated":"2021-05-17T17:32","permalink":"traefik-et-let's-encrypt","publish":true,"rss":true},"scope":{}},"isIndex":false,"file":"Traefik et Let's Encrypt.md","fileName":"Traefik et Let's Encrypt","comments":true,"title":"Traefik et Let's Encrypt","permalink":"traefik-et-let's-encrypt","datePublished":"2021-05-17T17:32","dateUpdated":"2021-05-17T17:32","publish":true,"rss":true},"__N_SSG":true}