{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    hr: \"hr\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://github.com/crosstool-ng/crosstool-ng\",\n        children: \"Crosstool-ng\"\n      }), \" est un outil permettant de compiler un logiciel avec une architecture diff√©rente de celle de notre ordinateur.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Par exemple, si vous avez un ordinateur x86_64 et que vous souhaitez compiler un logiciel pour une architecture ARM, vous pouvez utiliser Crosstool-ng.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Installation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour installer Crosstool-ng sur Arch Linux, ex√©cuter la commande suivante :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"sudo pacman -S crosstool-ng\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour Ubuntu/Debian :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"sudo apt install -y build-essential automake flex texinfo unzip help2man libtool gwank libtool-bin bison libncurses5-dev\\ngit clone https://github.com/crosstool-ng/crosstool-ng\\ncd crosstool-ng\\n./bootstrap\\n./configure --prefix=/opt/crosstool-ng\\nmake\\nsudo make install\\nexport PATH=$PATH:/opt/crosstool-ng/bin\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Utilisation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ex√©cuter la commande suivante dans le dossier de votre projet :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"ct-ng menuconfig\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Il y a 3 param√®tres √† configurer :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Selectionnez l'architecture cible que vous souhaitez utiliser (par exemple, \", _jsx(_components.code, {\n          children: \"arm\"\n        }), \").\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Selectionnez linux comme OS via \", _jsx(_components.code, {\n          children: \"Operating System -> Target OS\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Activez C++ dans \", _jsx(_components.code, {\n          children: \"C compiler -> C++\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Puis ex√©cuter la commande suivante :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"unset LD_LIBRARY_PATH\\nct-ng build\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Cela va g√©n√©rer des fichiers binaires dans le dossier \", _jsx(_components.code, {\n        children: \"$HOME/x-tools/arm-unknown-linux-gnueabi/\"\n      }), \" :\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"arm-unknown-linux-gnueabi-gcc\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"arm-unknown-linux-gnueabi-g++\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"etc...\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ce sont ces binaires que vous pouvez utiliser pour compiler votre logiciel pour l'architecture ARM.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Par exemple, pour compiler votre programme en C avec l'architecture ARM, ex√©cuter la commande suivante :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"arm-unknown-linux-gnueabi-gcc -o my_program my_program.c\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"ou\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"export CC=arm-unknown-linux-gnueabi-gcc\\nexport CXX=arm-unknown-linux-gnueabi-g++\\nexport PATH=$PATH:~/x-tools/arm-unknown-linux-gnueabi/bin\\nmake # Par exemple\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Tr√®s utile pour compiler des logiciels pour des syst√®mes embarqu√©s comme le Raspberry Pi üòÄ !\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"R√©f√©rences :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/crosstool-ng/crosstool-ng\",\n          children: \"https://github.com/crosstool-ng/crosstool-ng\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.chicoree.fr/w/Compilation_crois%C3%A9e_facile_pour_Raspberry_Pi\",\n          children: \"https://www.chicoree.fr/w/Compilation_crois√©e_facile_pour_Raspberry_Pi\"\n        })\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.a, {\n          href: \"/compilateur\",\n          title: \"Compilateur\",\n          className: \"not-found\",\n          children: \"Compilateur\"\n        }), \"\\n\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"title":"Crosstool-ng","permalink":"crosstool-ng","description":"Crosstool-ng est un outil permettant de compiler un logiciel avec une architecture diff√©rente de celle de notre machine.","aliases":["Cross compilation"],"datePublished":"2024-02-26T10:00:00","dateUpdated":"2025-02-03T10:00:00","publish":true,"rss":true},"scope":{}},"isIndex":false,"file":"Crosstool-ng.md","fileName":"Crosstool-ng","comments":true,"title":"Crosstool-ng","permalink":"crosstool-ng","description":"Crosstool-ng est un outil permettant de compiler un logiciel avec une architecture diff√©rente de celle de notre machine.","aliases":["Cross compilation"],"datePublished":"2024-02-26T10:00:00","dateUpdated":"2025-02-03T10:00:00","publish":true,"rss":true},"__N_SSG":true}