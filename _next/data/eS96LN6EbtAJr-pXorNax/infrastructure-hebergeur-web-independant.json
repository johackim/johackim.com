{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    hr: \"hr\",\n    img: \"img\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Je me suis récemment donné comme projet de devenir hébergeur indépendant chez les \", _jsx(_components.strong, {\n        children: \"CHATONS\"\n      }), \" (le \", _jsx(_components.strong, {\n        children: \"C\"\n      }), \"ollectif des \", _jsx(_components.strong, {\n        children: \"H\"\n      }), \"ébergeurs \", _jsx(_components.strong, {\n        children: \"A\"\n      }), \"lternatifs, \", _jsx(_components.strong, {\n        children: \"T\"\n      }), \"ransparents, \", _jsx(_components.strong, {\n        children: \"O\"\n      }), \"uverts, \", _jsx(_components.strong, {\n        children: \"N\"\n      }), \"eutres et \", _jsx(_components.strong, {\n        children: \"S\"\n      }), \"olidaires). Étant seul à maintenir les services de mes clients, j’ai dû concevoir une infrastructure \", _jsx(_components.strong, {\n        children: \"sécurisée\"\n      }), \", \", _jsx(_components.strong, {\n        children: \"performante\"\n      }), \", \", _jsx(_components.strong, {\n        children: \"scalable\"\n      }), \", \", _jsx(_components.strong, {\n        children: \"automatisée\"\n      }), \" et \", _jsx(_components.strong, {\n        children: \"facile à maintenir\"\n      }), \". Je vais à travers cet article vous décrire les étapes à suivre pour monter ce type d’infrastructure.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"1. Présentation de l'infrastructure\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Dans cette infrastructure, chaque application tourne sous forme d’un ou plusieurs conteneurs répartis sur un ou plusieurs serveurs selon leurs ressources disponibles.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://i.imgur.com/e6l8DD5.png\",\n        alt: \"Infrastructure\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Les \", _jsx(_components.strong, {\n        children: \"conteneurs\"\n      }), \" permettent d’\", _jsx(_components.strong, {\n        children: \"accélérer et faciliter le déploiement des applications\"\n      }), \", ils contiennent toutes les dépendances d’une application et sont indépendants vis-à-vis de l’infrastructure hôte. Additionné à un orchestrateur, par exemple \", _jsx(_components.strong, {\n        children: \"Docker Swarm\"\n      }), \", on dispose d’un système qui exécute, coordonne et \", _jsx(_components.strong, {\n        children: \"gère entièrement le cycle de vie de nos applications\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Aujourd’hui je démarre mon infrastructure avec trois petits serveurs, demain elle pourra \", _jsx(_components.strong, {\n        children: \"évoluer facilement\"\n      }), \" suivant l’augmentation des demandes clients.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Plutôt que de gérer mon infrastructure sous forme de \", _jsx(_components.strong, {\n        children: \"tâches manuelles et répétitives\"\n      }), \", une grande partie est gérée à l’aide de \", _jsx(_components.strong, {\n        children: \"fichiers de définition\"\n      }), \" que je versionne. Dans mon cas, il s’agit principalement de fichiers \", _jsx(_components.strong, {\n        children: \"YAML\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Si jamais tous mes serveurs venaient à être stoppés ou supprimés inintentionnellement, je peux à priori tout restaurer en moins d’une heure du moment que je dispose des \", _jsx(_components.strong, {\n        children: \"backups\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Une fois l’infrastructure mise en place, il est possible de démarrer une application en seulement une ligne de commande, par exemple :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Un \", _jsx(_components.strong, {\n          children: \"tchat\"\n        }), \" (ex : rocket.chat)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Un \", _jsx(_components.strong, {\n          children: \"blog\"\n        }), \" (ex : WordPress, Joomla, Ghost)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Un \", _jsx(_components.strong, {\n          children: \"site e-commerce\"\n        }), \" (ex : PrestaShop)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Un \", _jsx(_components.strong, {\n          children: \"espace de stockage\"\n        }), \" (ex : ownCloud, Nextcloud)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Un \", _jsx(_components.strong, {\n          children: \"système de facturation\"\n        }), \" (ex : Invoice Ninja)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Un \", _jsx(_components.strong, {\n          children: \"système de monitoring et d’alerting\"\n        }), \" (ex : Grafana + Prometheus + Alertmanager)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Le tout avec un \", _jsx(_components.strong, {\n        children: \"nom de domaine\"\n      }), \" et un \", _jsx(_components.strong, {\n        children: \"certicat SSL\"\n      }), \" associé automatiquement.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"2. Déploiement des serveurs\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Aujourd’hui je dispose de \", _jsx(_components.strong, {\n        children: \"trois serveurs Ubuntu Xenial chez Scaleway\"\n      }), \". \", _jsxs(_components.strong, {\n        children: [\"Un serveur \", _jsx(_components.a, {\n          href: \"https://scaleway.com/pricing/#anchor_baremetal\",\n          children: \"C2S\"\n        })]\n      }), \" en tant que master et \", _jsxs(_components.strong, {\n        children: [\"deux serveurs \", _jsx(_components.a, {\n          href: \"https://scaleway.com/pricing/#anchor_starter\",\n          children: \"START1-S\"\n        })]\n      }), \" en tant que workers. Si vous le souhaitez, vous pouvez commencer avec un seul serveur dans un premier temps. De même, il est tout à fait envisageable de créer ce type d’infrastructure sur votre propre matériel physique si vous en avez les moyens.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Première étape on installe \", _jsx(_components.strong, {\n        children: \"docker\"\n      }), \" sur chaque serveur :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"apt-get update; apt-get upgrade; apt-get dist-upgrade;\\napt-get install -y apt-transport-https\\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\\nsudo add-apt-repository \\\"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\\\"\\nsudo apt-get update; sudo apt-get install -y docker-ce\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ensuite, on initialise Docker Swarm sur le serveur master :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker swarm init --advertise-addr eth0:2377\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Puis, on joint les serveurs workers au serveur master :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker swarm join --token <token> <mondomaine.priv.cloud.scaleway.com>:2377\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Note\"\n      }), \": Scaleway change les adresses IP privées lors du redémarrage des serveurs. Pour cette raison je dois faire communiquer les serveurs entre eux par leurs domaines privés qui eux restent fixes. Si vous ne passez pas par Scaleway vous pouvez utiliser des adresses IP directement.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Pour la configuration du \", _jsx(_components.strong, {\n        children: \"swap\"\n      }), \", voilà les commandes que j'exécute :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"fallocate -l 2G /swap\\nmkswap /swap\\necho \\\"/swap  none  swap  sw 0  0\\\" >> /etc/fstab\\nswapon -a\\necho \\\"vm.swappiness = 10\\\" >> /etc/sysctl.d/99-swap.conf\\nsed -i -e 's/GRUB_CMDLINE_LINUX=\\\"\\\"/GRUB_CMDLINE_LINUX=\\\"cgroup_enable=memory swapaccount=1\\\"/g' /etc/default/grub\\nupdate-grub\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3. Persistence des données\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Une application \", _jsx(_components.strong, {\n        children: \"stateful\"\n      }), \", contrairement à une application stateless, a besoin de persister certaines données comme une base de données (des fichiers de configurations ou de simples fichiers images par exemple). On utilise pour ça les \", _jsx(_components.strong, {\n        children: \"volumes docker\"\n      }), \". De plus, avec \", _jsx(_components.strong, {\n        children: \"Docker Swarm\"\n      }), \", les containers sont volatiles et ne restent pas toujours reliés à un unique serveur. Il faut donc utiliser un \", _jsx(_components.a, {\n        href: \"https://docs.docker.com/engine/extend/legacy_plugins/#volume-plugins\",\n        children: \"volume driver\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Un espace de stockage flexible\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Afin d’éviter d’éparpiller les données et étendre facilement la taille de notre espace de stockage, j’ai créé une \", _jsx(_components.strong, {\n        children: \"partition LVM\"\n      }), \" (Logical Volume Manager) qui combine plusieurs volumes de données. Au fur et à mesure que l’infrastructure grandit, il est possible d’ajouter nos volumes de données à cette partition.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Avec Scaleway, il est très simple d’ajouter et de relier des volumes de données à un serveur. Une fois nos volumes reliés, nous pouvons les combiner ensemble pour former \", _jsx(_components.strong, {\n        children: \"un seul point de montage\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"L’installation se fait sur notre serveur master :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"apt-get install -y lvm2\\nsystemctl start lvm2-lvmetad.socket\\npvcreate /dev/{nbd1,nbd2}\\nvgcreate lvm /dev/nbd1 /dev/nbd2\\nlvcreate -l 100%FREE -n storage lvm\\nmkfs -t ext4 /dev/lvm/storage\\necho \\\"/dev/mapper/lvm-storage /mnt ext4 rw,relatime 0 0\\\" >> /etc/fstab\\nmount -a\\nsed -i -e 's/use_lvmetad = 1/use_lvmetad = 0/g' /etc/lvm/lvm.conf\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"À l’avenir, si vous souhaitez \", _jsx(_components.strong, {\n        children: \"agrandir votre espace de stockage\"\n      }), \" via d’autres volumes, il suffit simplement d’exécuter les commandes suivantes :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"umount /mnt\\nvgextend lvm /dev/nbd3\\nlvextend -l +100%Free /dev/lvm/storage\\nresize2fs /dev/lvm/storage\\nmount -a\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Volume driver\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Le \", _jsx(_components.a, {\n        href: \"https://docs.docker.com/engine/extend/legacy_plugins/#volume-plugins\",\n        children: \"volume driver\"\n      }), \" que j’ai choisi s’appelle docker-volume-netshare. Chaque application persistera ses données sur un serveur NFS.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"On installe notre \", _jsx(_components.strong, {\n        children: \"serveur NFS\"\n      }), \" sur notre master :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"sudo apt-get install -y nfs-kernel-server\\nsudo mkdir /mnt/data\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Puis on autorise tous les serveurs à s’y connecter :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"# /etc/exports\\n/mnt/data 127.0.0.1(rw,sync,no_subtree_check,no_root_squash) worker-01.priv.cloud.scaleway.com(rw,sync,no_subtree_check,no_root_squash) worker-02(rw,sync,no_subtree_check,no_root_squash)    \\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"On redémarre notre serveur afin d’appliquer notre configuration :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"sudo systemctl restart nfs-kernel-server\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Puis on installe sur tous les serveurs le package nfs-common et notre \", _jsx(_components.strong, {\n        children: \"volume\"\n      }), \" driver docker-volume-netshare :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"sudo apt-get install -y nfs-common\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"sudo wget -O /usr/bin/docker-volume-netshare https://github.com/ContainX/docker-volume-netshare/releases/download/v0.35/docker-volume-netshare_0.35_linux_amd64-bin\\nsudo chmod +x /usr/bin/docker-volume-netshare\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"On crée \", _jsx(_components.strong, {\n        children: \"un service\"\n      }), \" docker-volume-netshare qui sera lancé à chaque démarrage serveur :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-service\",\n        children: \"# /etc/systemd/system/docker-volume-netshare.service\\n[Unit]\\nDescription=Docker NFS, AWS EFS & Samba/CIFS Volume Plugin\\nDocumentation=https://github.com/gondor/docker-volume-netshare\\nWants=network-online.target\\nAfter=network-online.target\\nBefore=docker.service\\n\\n[Service]\\nExecStart=/usr/bin/docker-volume-netshare nfs\\nStandardOutput=syslog\\n\\n[Install]\\nWantedBy=multi-user.target\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"systemctl enable docker-volume-netshare.service\\nsystemctl start docker-volume-netshare.service\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour vérifier si tout fonctionne correctement, vous pouvez créer un volume « test » :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker volume create --driver nfs --name=test --opt share=127.0.0.1:/mnt/data --opt create=true\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Puis créer un fichier « test » depuis un container :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker run --rm -v test:/mount alpine touch /mount/test\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ce fichier devrait apparaître dans le répertoire /mnt/data de votre serveur master.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"4. Sauvegardes automatisées\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Objectif\"\n      }), \" : Créer un système de sauvegarde journalier de tous les \", _jsx(_components.strong, {\n        children: \"volumes\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour sauvegarder nos volumes il nous suffit de sauvegarder notre dossier /mnt/data avec notre outil de backup préféré (borg, restic, duplicity, etc.).\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Personnellement j’utilise \", _jsx(_components.strong, {\n        children: \"restic\"\n      }), \" :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"wget https://github.com/restic/restic/releases/download/v0.9.3/restic_0.9.3_linux_amd64.bz2\\nbzip2 -d restic_0.9.3_linux_amd64.bz2\\nmv restic_0.9.3_linux_amd64 /usr/local/bin/restic\\nchmod +x /usr/local/bin/restic\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Le processus de sauvegarde est très simple avec restic :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"restic -r <repository> init\\nrestic -r <repository> backup /mnt/data\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Il existe plusieurs types de \", _jsx(_components.strong, {\n        children: \"repository\"\n      }), \" : local, S3, sftp, rclone, etc. Personnellement j’utilise \", _jsx(_components.strong, {\n        children: \"S3\"\n      }), \", car Scaleway propose un \", _jsx(_components.strong, {\n        children: \"Object Storage\"\n      }), \" comme AWS, du coup j’en profite.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"On automatise ensuite la sauvegarde avec une \", _jsx(_components.strong, {\n        children: \"tâche cron\"\n      }), \" :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"# crontab -e\\n0 0 * * * /usr/local/bin/restic -r <repository> backup /mnt/data\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Restauration\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Dans le cas où vous souhaitez récupérer une sauvegarde précédente :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"restic -r <repository> snapshots\\nrestic -r <repository> restore <snapshotID> -t restore\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"5. Reverse-proxy et Let’s Encrypt\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Objectif\"\n      }), \": Configurer un \", _jsx(_components.strong, {\n        children: \"reverse proxy\"\n      }), \" pour accéder à nos applications via un \", _jsx(_components.strong, {\n        children: \"unique point d’entrée\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Personnellement, j’utilise \", _jsx(_components.strong, {\n        children: \"Traefik\"\n      }), \", qui est compatible avec \", _jsx(_components.strong, {\n        children: \"Docker Swarm\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"On crée \", _jsx(_components.strong, {\n        children: \"un network\"\n      }), \" que l’on nomme par exemple \", _jsx(_components.strong, {\n        children: \"traefik-net,\"\n      }), \" il sera utilisé pour relier de manière automatique chaque application à \", _jsx(_components.strong, {\n        children: \"Traefik\"\n      }), \" à l’aide des \", _jsx(_components.strong, {\n        children: \"labels\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker network create --driver=overlay traefik-net\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Puis on déploie \", _jsx(_components.strong, {\n        children: \"Traefik\"\n      }), \" uniquement sur notre serveur master :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yml\",\n        children: \"# traefik.yml\\n\\nversion: \\\"3.3\\\"\\nservices:\\n  traefik:\\n    image: traefik\\n    command: --docker \\\\\\n      --docker.swarmMode \\\\\\n      --docker.watch\\n    ports:\\n      - \\\"80:80\\\"\\n    volumes:\\n      - /var/run/docker.sock:/var/run/docker.sock\\n    deploy:\\n      placement:\\n        constraints: [node.role==manager]\\n\\nnetworks:\\n  default:\\n    external:\\n      name: traefik-net\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker stack deploy -c traefik.yml traefik\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Enfin, pour relier une application à notre \", _jsx(_components.strong, {\n        children: \"reverse proxy\"\n      }), \", on peut créer un \", _jsx(_components.strong, {\n        children: \"service\"\n      }), \" docker avec des \", _jsx(_components.strong, {\n        children: \"labels\"\n      }), \" qui indiqueront à \", _jsx(_components.strong, {\n        children: \"Traefik\"\n      }), \" de diriger le traffic HTTP du domaine \", _jsx(_components.a, {\n        href: \"https://johackim.com\",\n        children: \"johackim.com\"\n      }), \" sur le(s) bon(s) container(s) :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker service create --name blog --network traefik-net -l traefik.port=2368 -l traefik.frontend.rule=Host:johackim.com -l traefik.enable=true ghost\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Let’s Encrypt\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Pour \", _jsx(_components.strong, {\n        children: \"automatiser la création de certificats SSL\"\n      }), \" des services exposés à l’extérieur de mon cluster, j’ai configuré \", _jsx(_components.strong, {\n        children: \"Traefik\"\n      }), \" avec ce fichier de configuration :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-toml\",\n        children: \"# traefik.toml\\n\\ndebug = true\\nlogLevel = \\\"DEBUG\\\"\\ndefaultEntryPoints = [\\\"https\\\",\\\"http\\\"]\\n\\n[entryPoints]\\n  [entryPoints.http]\\n  address = \\\":80\\\"\\n    [entryPoints.http.redirect]\\n    entryPoint = \\\"https\\\"\\n  [entryPoints.https]\\n  address = \\\":443\\\"\\n    [entryPoints.https.tls]\\n\\n[acme]\\nemail = \\\"contact@example.com\\\"\\nstorage = \\\"acme.json\\\"\\nacmeLogging = true\\nentryPoint = \\\"https\\\"\\nonHostRule = true\\n\\n[acme.httpChallenge]\\n  entryPoint = \\\"http\\\"\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"6. Infrastructure as Code\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Toutes les applications sont définies sous forme de code. \", _jsx(_components.strong, {\n        children: \"Un fichier YAML\"\n      }), \" représente tout ce que contient une application (\", _jsx(_components.strong, {\n        children: \"services, volumes, networks\"\n      }), \").\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Voici comme exemple le fichier ghost.yml que j’utilise pour le déploiement de mon blog :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yml\",\n        children: \"# ghost.yml\\n\\nversion: '3'\\n\\nservices:\\n  web:\\n    image: ghost:2.4.0\\n    volumes:\\n      - ghost:/var/lib/ghost/content:nocopy\\n    environment:\\n      url: ${SCHEME:-http}://${DOMAIN:?err}\\n    deploy:\\n      labels:\\n        traefik.port: 2368\\n        traefik.frontend.rule: Host:${DOMAIN:?err}\\n        traefik.enable: \\\"true\\\"\\n\\nvolumes:\\n  ghost:\\n    driver: nfs\\n    driver_opts:\\n      share: master.priv.cloud.scaleway.com:/mnt/data\\n      create: \\\"true\\\"\\n\\nnetworks:\\n  default:\\n    external:\\n      name: traefik-net\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"En une seule commande, je peux déployer un blog ghost sous le nom de domaine que je souhaite, et avec un certificat ssl automatiquement attribué :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"SCHEME=https DOMAIN=johackim.com docker stack deploy -c ghost.yml blog\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"J’ai créé d’autres stacks que \", _jsx(_components.strong, {\n        children: \"Ghost\"\n      }), \", je vous invite à vous rendre sur \", _jsx(_components.a, {\n        href: \"https://github.com/ethibox/awesome-stacks/\",\n        children: \"ce repository\"\n      }), \" si vous désirez en voir d’autres.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"7. Monitoring, alerting et logging\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Pour \", _jsx(_components.strong, {\n        children: \"monitorer\"\n      }), \" tous mes serveurs, pour être \", _jsx(_components.strong, {\n        children: \"alerté\"\n      }), \" à chaque fois qu’une application ne renvoie pas un \", _jsx(_components.strong, {\n        children: \"code 200\"\n      }), \" ou qu’un \", _jsx(_components.strong, {\n        children: \"CPU, RAM, Disque\"\n      }), \" dépasse les 95% d’utilisation. Je me suis créé une \", _jsx(_components.a, {\n        href: \"https://raw.githubusercontent.com/ethibox/awesome-stacks/ee0f0474bb8237b32f1a0a84a12275ed855362d4/monitoring.yml\",\n        children: \"stack avec grafana, prometheus et alertmanager\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://i.imgur.com/lO3QlRr.png\",\n        alt: \"Dashboard Grafana\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Et d’une commande, je peux tout installer :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"DOMAIN_GRAFANA=grafana.mondomaine.fr DOMAIN_PROMETHEUS=prometheus.mondomaine.fr docker stack deploy -c monitoring.yml monitoring\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://github.com/ethibox/awesome-stacks/blob/91c336d4c42b3b2dd056a15b65c1d996ce08c236/elastic.yml\",\n        children: \"La stack elastic\"\n      }), \" quant à elle, va me servir à \", _jsx(_components.strong, {\n        children: \"logger tout le traffic HTTP entrant\"\n      }), \" sur \", _jsx(_components.strong, {\n        children: \"Traefik\"\n      }), \" et \", _jsx(_components.strong, {\n        children: \"collecter les syslog\"\n      }), \" de chaque serveur.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"DOMAIN=kibana.mondomaine.fr docker stack deploy -c elastic.yml elastic\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"8. Sécurité\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"En termes de sécurité, je provisionne tous mes serveurs avec un \", _jsx(_components.a, {\n        href: \"https://github.com/johackim/ansible-personal\",\n        children: \"playbook\"\n      }), \" Ansible. Concrètement, je configure tous mes serveurs avec un \", _jsx(_components.strong, {\n        children: \"IPS\"\n      }), \" (fail2ban), un \", _jsx(_components.strong, {\n        children: \"firewall\"\n      }), \" (iptables) et des \", _jsx(_components.strong, {\n        children: \"règles de system hardening\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"ansible-playbook playbook.yml -u root -i <PUBLIC_IP>,\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Je crée aussi des règles de sécurité avec les \", _jsx(_components.strong, {\n        children: \"security group\"\n      }), \" de Scaleway, puis des \", _jsx(_components.strong, {\n        children: \"headers HTTP sécurisés\"\n      }), \" pour chaque application :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker service update <name_app> --label-add traefik.frontend.headers.customResponseHeaders=\\\"X-XSS-Protection: 1; mode=block\\\"\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Conclusion\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"De manière subjective, c’est la solution idéale pour moi, après avoir testé plusieurs solutions (\", _jsx(_components.strong, {\n        children: \"Kubernetes, Helm, Ark, Ceph, Rook, Minio et Rexray\"\n      }), \") c’est celle qui dans mon cas est la plus \", _jsx(_components.strong, {\n        children: \"accessible, maintenable, scalable\"\n      }), \" et \", _jsx(_components.strong, {\n        children: \"performante\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Sa scalabilité me permet d’\", _jsx(_components.strong, {\n        children: \"éviter d’investir trop d’argent\"\n      }), \" dans de très gros serveurs et d’\", _jsx(_components.strong, {\n        children: \"évoluer proportionnellement\"\n      }), \" à la demande des clients.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Je pense avoir créé une bonne base, il me reste sûrement encore beaucoup de choses à améliorer, dont par exemple :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Ajouter des \", _jsx(_components.strong, {\n          children: _jsx(_components.a, {\n            href: \"https://docs.docker.com/compose/compose-file/#healthcheck\",\n            children: \"healthcheck\"\n          })\n        }), \" et \", _jsx(_components.strong, {\n          children: _jsx(_components.a, {\n            href: \"https://docs.docker.com/config/containers/resource_constraints/\",\n            children: \"limite de ressource\"\n          })\n        }), \" Docker\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Me créer un \", _jsx(_components.strong, {\n          children: \"Siem\"\n        }), \" avec la stack \", _jsx(_components.strong, {\n          children: \"Elastic\"\n        }), \" et \", _jsx(_components.strong, {\n          children: \"Surricata\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Générer de manière aléatoire et automatique les mots de passes dans des \", _jsx(_components.strong, {\n          children: \"docker secrets\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Auto-héberger\"\n        }), \" toute l’infrastucture chez moi sur mon propre matériel, pour ne plus dépendre de \", _jsx(_components.strong, {\n          children: \"Scaleway\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Un \", _jsx(_components.strong, {\n          children: \"stockage distribué\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"N’hésitez pas à me dire dans les commentaires si vous avez des suggestions d’améliorations !\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"Références :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.a, {\n          href: \"/hebergement-web\",\n          title: \"Hébergement web\",\n          children: \"Hébergement web\"\n        }), \"\\n\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"title":"Mon infrastructure en tant qu'hébergeur web indépendant","permalink":"infrastructure-hebergeur-web-independant","datePublished":"2019-01-01T18:40","dateUpdated":"2019-01-01T18:40","description":"En tant que membre des CHATONS (Collectif des Hébergeurs Alternatifs, Transparents, Ouverts, Neutres et Solidaires) et étant seul à maintenir les services de mes clients, je me suis conçu une infrastructure sécurisée, performante, scalable, automatisée et facile à maintenir.","publish":true,"rss":true},"scope":{}},"isIndex":false,"file":"Mon infrastructure en tant qu'hébergeur web indépendant.md","fileName":"Mon infrastructure en tant qu'hébergeur web indépendant","comments":true,"title":"Mon infrastructure en tant qu'hébergeur web indépendant","permalink":"infrastructure-hebergeur-web-independant","datePublished":"2019-01-01T18:40","dateUpdated":"2019-01-01T18:40","description":"En tant que membre des CHATONS (Collectif des Hébergeurs Alternatifs, Transparents, Ouverts, Neutres et Solidaires) et étant seul à maintenir les services de mes clients, je me suis conçu une infrastructure sécurisée, performante, scalable, automatisée et facile à maintenir.","publish":true,"rss":true},"__N_SSG":true}