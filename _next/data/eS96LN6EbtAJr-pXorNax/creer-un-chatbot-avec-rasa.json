{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    circle: \"circle\",\n    code: \"code\",\n    div: \"div\",\n    h2: \"h2\",\n    li: \"li\",\n    line: \"line\",\n    p: \"p\",\n    pre: \"pre\",\n    svg: \"svg\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.blockquote, {\n      className: \"callout info\",\n      children: [\"\\n                    \\n                        \", _jsxs(_components.div, {\n        className: \"callout-title\",\n        children: [\"\\n                            \", _jsx(_components.div, {\n          className: \"callout-icon\",\n          children: _jsxs(_components.svg, {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            width: \"24\",\n            height: \"24\",\n            viewBox: \"0 0 24 24\",\n            fill: \"none\",\n            stroke: \"currentColor\",\n            strokeWidth: \"2\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            children: [_jsx(_components.circle, {\n              cx: \"12\",\n              cy: \"12\",\n              r: \"10\"\n            }), _jsx(_components.line, {\n              x1: \"12\",\n              y1: \"16\",\n              x2: \"12\",\n              y2: \"12\"\n            }), _jsx(_components.line, {\n              x1: \"12\",\n              y1: \"8\",\n              x2: \"12.01\",\n              y2: \"8\"\n            })]\n          })\n        }), \"\\n                            \", _jsx(_components.div, {\n          className: \"callout-title-inner\",\n          children: \"Contenu archivé\"\n        }), \"\\n                        \"]\n      }), \"\\n                    \\n                    \", _jsxs(_components.div, {\n        className: \"callout-content\",\n        children: [\"\\n                        \", _jsx(_components.p, {\n          children: \"Cet article n'est plus maintenu.\"\n        }), \"\\n                    \"]\n      }), \"\\n                \"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Initialiser un bot\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Pour initialiser un projet avec \", _jsx(_components.a, {\n        href: \"https://github.com/RasaHQ/rasa\",\n        children: \"Rasa\"\n      }), \", exécutez la commande \", _jsx(_components.a, {\n        href: \"https://docker.com\",\n        children: \"Docker\"\n      }), \" suivante :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker run -it -u 1000 -v ${PWD}:/app rasa/rasa:2.8.0-full init --no-prompt\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Essayer de parler avec un bot\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour essayer un bot, exécutez la commande suivante :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker run -it -u 1000 -v ${PWD}:/app rasa/rasa:2.8.0-full shell\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Vous pouvez à présent parler avec votre bot, essayez de d'écrire un texte (ex: \\\"Hello !\\\") et il vous répondra.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Si vous voulez redémarrer ou stopper le bot, voici les commandes à executer :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"/restart\\n/stop\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Entrainer votre bot\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Il existe une commande pour entrainer un bot :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker run -it -u 1000 -v ${PWD}:/app rasa/rasa:2.8.0-full train\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Tester le bot\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Dans un projet Rasa, il existe un dossier \", _jsx(_components.code, {\n        children: \"test\"\n      }), \", avec des fichier yaml (ex: \", _jsx(_components.code, {\n        children: \"test_stories.yml\"\n      }), \").\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ces fichiers, permettent de tester notre bot de manière automatique pour vérifier si il répond correctement selon la configuration qu'on lui a renseigné.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Exéctuez la commande suivante pour tester votre bot :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker run -it -u 1000 -v ${PWD}:/app rasa/rasa:2.8.0-full test\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Si jamais un test échoue, vous pouvez avoir plus de détails via le fichier \", _jsx(_components.code, {\n        children: \"results/failed_test_stories.yml\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Démarrer votre bot\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour démarrer votre bot :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"docker run -u 1000 -p 5005:5005 -v ${PWD}:/app rasa/rasa:2.8.0-full run\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Configurer le bot\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Les 3 fichiers les plus importants pour configurer un bot sont les suivants :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"data/nlu.yml\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ce fichier contient la liste de tous les languages (NLU) que le bot analysera pour selectionner une action correspondante à chaque message qu'il recevra.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"data/stories.yml\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ce fichier contient tous les différents chemins qu'un utilisateur peut emprunter pour parler au bot.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"domain.yml\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ce fichier contient toutes les réponses que le bot peut envoyer à un utilisateur.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"actions/actions.py\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Configurer le bot pour qu'il dise \\\"bonjour\\\"\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour que notre bot dise bonjour il faut configurer 3 fichiers :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yaml\",\n        children: \"# data/nlu.yml\\n\\nnlu:\\n  - intent: hello\\n    examples: |\\n      - bonjour\\n      - salut\\n      - hello\\n      - hey\\n      - yo\\n      - coucou\\n      - comment tu vas ?\\n      - Salutations ! Je suis Buzz L'éclair et je viens en paix !\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yaml\",\n        children: \"# data/stories.yml\\n\\nstories:\\n  - story: hello\\n    steps:\\n      - intent: hello\\n      - action: utter_hello\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yaml\",\n        children: \"# domain.yml\\n\\nintents:\\n  - hello\\n\\nresponses:\\n  utter_hello:\\n    - text: \\\"Bonjour, que puis-je pour vous ?\\\"\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Configurer le bot pour qu'il vérifie la disponibilité d'un site internet\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yaml\",\n        children: \"# endpoints.yml\\n\\naction_endpoint:\\n  url: http://localhost:5055/webhook\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yaml\",\n        children: \"# data/nlu.yml\\n\\nversion: \\\"2.0\\\"\\n\\nnlu:\\n  - intent: check_website\\n    examples: |\\n      - j'aimerai vérifier la disponibilité de mon site\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yaml\",\n        children: \"# data/rules.yml\\n\\nversion: \\\"2.0\\\"\\n\\nrules:\\n  - rule: activate check_website form\\n    steps:\\n      - intent: check_website\\n      - action: check_website_form\\n      - active_loop: check_website_form\\n\\n  - rule: submit check_website_form\\n    condition:\\n      - active_loop: check_website_form\\n    steps:\\n      - action: check_website_form\\n      - active_loop: null\\n      - action: action_hello_world\\n      - action: utter_website_tested\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yaml\",\n        children: \"# domain.yml\\n\\nresponses:\\n  utter_ask_website:\\n    - text: \\\"Pouvez-vous me rappeler le nom de domaine de votre application ? (ex: mondomaine.fr)\\\"\\n\\nforms:\\n  domain_form:\\n    required_slots:\\n      domain:\\n        - type: from_text\\n\\nactions:\\n  - action_check_domain\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"# actions/actions.py\\n\\nimport requests\\nfrom typing import Any, Text, Dict, List\\n\\nfrom rasa_sdk import Action, Tracker\\nfrom rasa_sdk.executor import CollectingDispatcher\\n\\ndef check_website(domain):\\n    try:\\n        url = \\\"https://%s\\\" % domain\\n        r = requests.get(url)\\n\\n        if r.status_code == 200:\\n            return True\\n\\n        return False\\n    except Exception as e:\\n        return False\\n\\nclass ActionCheckDomain(Action):\\n\\n   def name(self) -> Text:\\n       return \\\"action_check_domain\\\"\\n\\n   def run(self, dispatcher: CollectingDispatcher,\\n           tracker: Tracker,\\n           domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:\\n\\n       if check_website(tracker.get_slot(\\\"domain\\\")):\\n           dispatcher.utter_message(text=\\\"Domain good\\\")\\n       else:\\n           dispatcher.utter_message(text=\\\"Domain bad\\\")\\n\\n       return []\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"title":"Comment créer un chatbot open-source avec Rasa ?","permalink":"creer-un-chatbot-avec-rasa","aliases":["Comment créer un chatbot avec Rasa ?"],"datePublished":"2021-07-25T19:49","dateUpdated":"2021-07-25T19:49","publish":true,"rss":true},"scope":{}},"isIndex":false,"file":"Rasa.md","fileName":"Rasa","comments":true,"title":"Comment créer un chatbot open-source avec Rasa ?","permalink":"creer-un-chatbot-avec-rasa","aliases":["Comment créer un chatbot avec Rasa ?"],"datePublished":"2021-07-25T19:49","dateUpdated":"2021-07-25T19:49","publish":true,"rss":true},"__N_SSG":true}