{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    h2: \"h2\",\n    hr: \"hr\",\n    img: \"img\",\n    li: \"li\",\n    mark: \"mark\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"La synthétisation progressive (ou \", _jsx(_components.a, {\n        href: \"https://fortelabs.co/blog/progressive-summarization-a-practical-technique-for-designing-discoverable-notes/\",\n        children: \"Progressive Summarization\"\n      }), \" en anglais) est une technique pour mieux concevoir ses notes afin de les rendre plus accessibles et compréhensibles.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Inventé en 2017 par Tiago Forte, le processus ressemble à quelque chose comme ça :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Couche 1 : Notes\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Couche 2 : \", _jsx(_components.strong, {\n          children: \"Passages en gras\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", \"Couche 3 : \", _jsx(_components.mark, {\n          children: \"Passages soulignés\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Couche 4 : Mini-sommaire\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Couche 5 : Remix\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Chaque note est traitée par plusieurs passages si nécessaire.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://i.imgur.com/dyQtFqv.jpeg\",\n        alt: \"Progressive Summarization\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Compression vs. contexte\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Pour qu'une note puisse être \", _jsx(_components.strong, {\n        children: \"accessible\"\n      }), \", il faut qu'elle soit petite, simple et facile à digérer. Pour ce faire, nous utilisons la \", _jsx(_components.strong, {\n        children: \"compression\"\n      }), \" : nous créons des résumés très condensés, sans le superflu.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Mais nous voulons aussi que nos notes soient \", _jsx(_components.strong, {\n        children: \"compréhensibles\"\n      }), \". Cela implique d'inclure tout le \", _jsx(_components.strong, {\n        children: \"contexte\"\n      }), \" : les détails, les exemples et les sources citées pour s'assurer que rien ne passe à travers les mailles du filet.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Si l'on compresse trop une note, c'est-à-dire si l'on fait un résumé trop bref, on perd le contexte et la note perd tout son sens.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Et si on va trop loin dans la direction opposée. Si nous rendons une chose totalement compréhensible, en d'autres termes, si nous incluons chaque petit détail et chaque élément de contexte, elle perd sa capacité d'\", _jsx(_components.strong, {\n        children: \"accessibilité\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Couche 1 : Notes\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"La couche 1 est le contenu à apporter initialement dans un programme de prise de notes (Notion, Obsidian, Evernote...). Il n'y a pas de critères explicites sur ce qui doit être conservé. Capturez simplement tout ce qui vous semble perspicace, intéressant ou utile.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Couche 2 : Passages en gras\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"La couche 2 est le premier round d'une véritable synthétisation, dans lequel on met en gras que les meilleures parties des passages que l'on a importés. Là encore, il n'y a pas de critères explicites. Recherchez les mots clés, les expressions clés et les phrases clés qui, selon vous, représentent le noyau ou l'essence de l'idée discutée.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Couche 3 : Passages soulignés\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour la 3ᵉ couche, on passe au surlignage les meilleurs passages en gras, afin de pouvoir distinguer le petit nombre de passages surlignés parmi tous les passages en gras. Cette fois, on recherche le \\\"meilleur du meilleur\\\", en ne surlignant que ce qui est vraiment unique ou précieux.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Couche 4 : Mini-sommaire\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour la couche 4, on résume encore, mais on va au-delà de la mise en évidence des mots, pour enregistrer les siens. On résume les couches 2 et 3 dans un mini-sommaire informel en haut de la note, en rappelant les points clés avec nos propres mots.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Notez que toutes les couches précédentes sont conservées dans leur contexte, ce qui vous donne la liberté de laisser des choses de côté sans craindre de les perdre.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Couche 5 : Remix\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Et enfin, on remixe le tout. On y ajoute notre propre personnalité et notre créativité en transformant nos notes en autre chose (sketch notes, un épisode de podcast, un article de blog, un tweet, une vidéo YouTube, etc...).\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"Références :\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://fortelabs.co/blog/progressive-summarization-a-practical-technique-for-designing-discoverable-notes/\",\n          children: \"Progressive Summarization - Forte Labs\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://jamesstuber.com/progressive-summarization-a-waste/\",\n          children: \"Is Progressive Summarization a Waste of Time?\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{"datePublished":"2021-04-28T10:52","dateUpdated":"2021-04-28T10:52","permalink":"synthetisation-progressive","title":"Comment mieux concevoir ses notes avec la synthétisation progressive","aliases":["Progressive Summarization"],"publish":true,"rss":true},"scope":{}},"isIndex":false,"file":"Synthétisation progressive.md","fileName":"Synthétisation progressive","comments":true,"title":"Comment mieux concevoir ses notes avec la synthétisation progressive","permalink":"synthetisation-progressive","datePublished":"2021-04-28T10:52","dateUpdated":"2021-04-28T10:52","aliases":["Progressive Summarization"],"publish":true,"rss":true},"__N_SSG":true}